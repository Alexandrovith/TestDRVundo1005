using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AXONIM.ScanParamOfDevicves;
using AXONIM.CONSTS;
using System.Windows.Forms;
using System.Threading;
using System.Net.Sockets;

namespace TestDRVtransGas
{
	public abstract class CExchange : CModbusTCP
	{

		byte[] _7e1_to_8n1 = {
		0x00, 0x81, 0x82, 0x03, 0x84, 0x05, 0x06, 0x87, 0x88, 0x09, 0x0A, 0x8B,
		0x0C, 0x8D, 0x8E, 0x0F, 0x90, 0x11, 0x12, 0x93, 0x14, 0x95, 0x96, 0x17,
		0x18, 0x99, 0x9A, 0x1B, 0x9C, 0x1D, 0x1E, 0x9F, 0xA0, 0x21, 0x22, 0xA3,
		0x24, 0xA5, 0xA6, 0x27, 0x28, 0xA9, 0xAA, 0x2B, 0xAC, 0x2D, 0x2E, 0xAF,
		0x30, 0xB1, 0xB2, 0x33, 0xB4, 0x35, 0x36, 0xB7, 0xB8, 0x39, 0x3A, 0xBB,
		0x3C, 0xBD, 0xBE, 0x3F, 0xC0, 0x41, 0x42, 0xC3, 0x44, 0xC5, 0xC6, 0x47,
		0x48, 0xC9, 0xCA, 0x4B, 0xCC, 0x4D, 0x4E, 0xCF, 0x50, 0xD1, 0xD2, 0x53,
		0xD4, 0x55, 0x56, 0xD7, 0xD8, 0x59, 0x5A, 0xDB, 0x5C, 0xDD, 0xDE, 0x5F,
		0x60, 0xE1, 0xE2, 0x63, 0xE4, 0x65, 0x66, 0xE7, 0xE8, 0x69, 0x6A, 0xEB,
		0x6C, 0xED, 0xEE, 0x6F, 0xF0, 0x71, 0x72, 0xF3, 0x74, 0xF5, 0xF6, 0x77,
		0x78, 0xF9, 0xFA, 0x7B, 0xFC, 0x7D, 0x7E, 0xFF, 0x00, 0x81, 0x82, 0x03,
		0x84, 0x05, 0x06, 0x87, 0x88, 0x09, 0x0A, 0x8B, 0x0C, 0x8D, 0x8E, 0x0F,
		0x90, 0x11, 0x12, 0x93, 0x14, 0x95, 0x96, 0x17, 0x18, 0x99, 0x9A, 0x1B,
		0x9C, 0x1D, 0x1E, 0x9F, 0xA0, 0x21, 0x22, 0xA3, 0x24, 0xA5, 0xA6, 0x27,
		0x28, 0xA9, 0xAA, 0x2B, 0xAC, 0x2D, 0x2E, 0xAF, 0x30, 0xB1, 0xB2, 0x33,
		0xB4, 0x35, 0x36, 0xB7, 0xB8, 0x39, 0x3A, 0xBB, 0x3C, 0xBD, 0xBE, 0x3F,
		0xC0, 0x41, 0x42, 0xC3, 0x44, 0xC5, 0xC6, 0x47, 0x48, 0xC9, 0xCA, 0x4B,
		0xCC, 0x4D, 0x4E, 0xCF, 0x50, 0xD1, 0xD2, 0x53, 0xD4, 0x55, 0x56, 0xD7,
		0xD8, 0x59, 0x5A, 0xDB, 0x5C, 0xDD, 0xDE, 0x5F, 0x60, 0xE1, 0xE2, 0x63,
		0xE4, 0x65, 0x66, 0xE7, 0xE8, 0x69, 0x6A, 0xEB, 0x6C, 0xED, 0xEE, 0x6F,
		0xF0, 0x71, 0x72, 0xF3, 0x74, 0xF5, 0xF6, 0x77, 0x78, 0xF9, 0xFA, 0x7B,
		0xFC, 0x7D, 0x7E, 0xFF };


		public readonly CTestExch Владелец;
		protected CRecieveMODtcp Recieve;
		/// <summary>
		/// Количество команд для запроса текущих данных
		/// </summary>
		protected int iQuantComm = 1;
		/// <summary>
		/// Номер текущего запроса
		/// </summary>
		int iCurrRequest = 0;

		public System.Timers.Timer TrStopWait = new System.Timers.Timer (5000);

		//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

		public CExchange (CTestExch Own)
		{
			Владелец = Own;
			TrStopWait.Elapsed += TrStopWait_Elapsed;
			TrStopWait.AutoReset = false;
			BufRX = new byte[1024];
			Recieve = new CRecieveMODtcp (BufRX, HandlingData, this);
		}
		//_______________________________________________________________________
		private void TrStopWait_Elapsed (object sender, System.Timers.ElapsedEventArgs e)
		{
			Disconnect ();
			OutMess ("[TCP] Прибор не ответил", Environment.NewLine);
		}
		//_________________________________________________________________________
		/// <summary>
		/// Дополнительные настройки перед отправкой запроса прибору
		/// </summary>
		public virtual void BeforeRequest ()
		{
			iCurrRequest = 0;
			iQuantComm = Владелец.TBCommand.Lines.Count ();
			PreviousComm = ECommand.Begin;
			NumRecieveByte = 0;

			Recieve.iCountHandle = 0; Recieve.iCnt = 0; /*Recieve.iCntPieces = 0; */Recieve.RecieveByte = 0; Recieve.iShow = 0;
		}
		//_______________________________________________________________________

		/// <summary>
		/// Символ команды запроса / записи
		/// </summary>
		enum ESymComm : byte { CurrVals = 0x6E, ФХП = 0x6D, }
		/// <summary>
		/// Текущее количество полученных байт ответа
		/// </summary>
		protected int NumRecieveByte;
		/// <summary>
		/// Длина ответа ожидаемая
		/// </summary>
		int iLenAnswer;
		object oHandl = new object ();
		int iPosData;
		public virtual bool HandlingData (CModbusTCP MTCP)
		{
			if (Владелец.Closing)
				return false;
			TrStopWait.Stop ();

			//OutMess ("CountHandl " + Recieve.iCountHandle + " ___" + Recieve.iCnt.ToString() + " iCntPeaces=" + Recieve.iCntPieces, "");
			OutMess ("[TCP] RX " + Recieve.RecieveByte + ": [" + Global.ByteArToStr (BufRX, 0, Recieve.RecieveByte) + "]", "");
			//OutMess ("iCntPieces " + Recieve.iCntPieces, "");
			if (BufTX[iPosData] == (byte)ESymComm.CurrVals)
			{
				if (BufRX[0] == 0xC9)
					iLenAnswer = Global.ToInt16rev (BufRX, 1);

				NumRecieveByte += Recieve.RecieveByte; //OutMess ("Full=" + iRecieveFull + " LenAnswer=" + iLenAnswer, "");
				if (iLenAnswer > NumRecieveByte)
				{
					//OutMess ("ReadNext", "");
					ReadNext ();    // SendComm (iPosData, usLenData);
				}
				return false;
			}
			else if (BufTX[iPosData] == (byte)ESymComm.ФХП)
			{
				NumRecieveByte += Recieve.RecieveByte; //OutMess ("Full=" + iRecieveFull + " LenAnswer=" + iLenAnswer, "");
				if (Recieve.LenAnswer > NumRecieveByte)
				{
					//OutMess ("ReadNext", "");
					ReadNext ();    // SendComm (iPosData, usLenData);
					return false;
				}
			}
			else
			{
				NumRecieveByte += Recieve.RecieveByte;
				if (Recieve.LenAnswer > NumRecieveByte)   //Recieve.RecieveByte
				{
					//OutMess ("ReadNext", ""); //OutMess ("LenAnswer " + Recieve.LenAnswer + " NumRecieveByte " + NumRecieveByte, "");
					ReadNext ();    // SendComm (iPosData, usLenData);
					return false;
				}
			}

			if (Recieve.LenAnswer == 1)
				Thread.Sleep ((int)Владелец.NUDTimeout.Value);//OutMess ("Buf2 " + ": [" + Global.ByteArToStr (Recieve.bta2, 0, Recieve.RecieveByte) + "]", "");
			if (++iCurrRequest < iQuantComm)
			{
				//OutMess ("iCountHandle " + Recieve.iCountHandle + " DataAvailable " + bNWstream, "");
				NumRecieveByte = 0;
				Request (Владелец.TBCommand.Lines[iCurrRequest]);
				return false;
			}
			return true;
		}
		//_______________________________________________________________________
		public void InitBufs (byte[] btaBufTX)
		{
			base.BufTX = btaBufTX;
		}
		//_______________________________________________________________________
		public virtual void Close ()
		{
			Disconnect ();
		}
		ushort usLenData;

		//_________________________________________________________________________
		public virtual bool Request (string asCommand)
		{
			iPosData = 0;// (int)EResponseMOD_TCP.AddrSlave;
			string[] asaComm = asCommand.Split (' ');
			if (Владелец.UDInverNum.Value <= iCurrRequest)
				usLenData = (ushort)(asaComm.Length * 2 - Владелец.UDInverShift.Value);
			else usLenData = (ushort)asaComm.Length;

			InitBufs (new byte[iPosData + usLenData]);

			//if (Владелец.Прибор is CIRGA2)
			if (Владелец.RMG == null)
			{
				if (asCommand.Length > 0)
				{
					int i = iPosData;
					foreach (var item in asaComm)
					{
						if (item[0] == '\'')            // Чтение символа 
						{
							byte bt = (byte)item[1];
							if (Владелец.UDInverNum.Value <= iCurrRequest && i >= iPosData + Владелец.UDInverShift.Value)
								BufTX[i++] = (byte)(~bt);
							BufTX[i++] = bt;
						}
						else
						{
							byte bt;
							if (byte.TryParse (item, System.Globalization.NumberStyles.HexNumber, null as IFormatProvider, out bt))
							{
								if (Владелец.UDInverNum.Value <= iCurrRequest &&
										i >= iPosData + Владелец.UDInverShift.Value)
									BufTX[i++] = (byte)(~bt);
								BufTX[i++] = bt;
							}
							else
							{
								MessageBox.Show ("Request. Неверный код команды [" + asCommand + "]");
								return false;
								//if (Владелец.RMG == null)
								//{
								//	MessageBox.Show ("Request. Неверный код команды [" + asCommand + "]");
								//	return false;
								//}
								//BufTX[i++] = (byte)item[item.Length == 1 ? 0 : 1];
							}
						}
					}
				}
				else usLenData = 0;
			}
			else   // Строка - в байты для RMG (и др. )
			{
				BufTX = ASCIIEncoding.ASCII.GetBytes (asCommand);
				if (BufTX[BufTX.Length - 1] == 'n' && BufTX[BufTX.Length - 3] == 'r')
				{
					BufTX[BufTX.Length - 4] = 0xd;
					BufTX[BufTX.Length - 3] = 0xa;
					usLenData = (ushort)(BufTX.Length - 2);
				}
				else usLenData = (ushort)BufTX.Length;
				Conv8n1To7e1 (BufTX, usLenData);				
			}

			if (IsConnect ())
			{
				Recieve.LenAnswer = GetReceivedBytesThreshold (BufTX, iPosData);
				if (SendComm ())
				{
					string asCom = Global.ByteArToStr (BufTX, 0, iPosData + usLenData);
					OutMess (string.Format ("TCP.TX {0} [{1}]", iCurrRequest + 1, asCom), iCurrRequest == 0 ? Environment.NewLine : "");
				}
			}
			else
			{
				MessageBox.Show ("[TCP] Нет соединения", "Connect()");
				return false;
			}
			return true;
		}
		//_________________________________________________________________________
		public byte[] Conv8n1To7e1 (byte[] btaBuf, int iLen)
		{
			for (int i = 0; i < iLen; i++)
			{
				btaBuf[i] = _7e1_to_8n1[btaBuf[i]];
			}
			return btaBuf;
		}
		//_________________________________________________________________________
		public bool SendComm ()
		{
			if (SendResponse (Recieve.RecieveAnswer) == AXONIM.CONSTS.SEND_COMM.Error)
			{
				MessageBox.Show ("Сбой при отправке по TCP.");
				return false;
			}
			return true;
		}
		//_________________________________________________________________________
		public void InitIPport (string asIP, int iPort)
		{
			this.asIP = asIP;
			this.iPort = iPort;
		}
		//_________________________________________________________________________
		public enum ECommand { Begin, SYS, Arch_Date, ФХП }
		ECommand PreviousComm = ECommand.Begin;

		private int GetReceivedBytesThreshold (byte[] btaBuf, int iStartPosData)
		{
			if (PreviousComm == ECommand.Begin)
			{
				if (btaBuf[iStartPosData] == 'S' && btaBuf[1 + iStartPosData] == 'Y' && btaBuf[2 + iStartPosData] == 'S')
				{
					PreviousComm = ECommand.SYS;       // Чтение архивов, времени 
					return 17;
				}
				if (btaBuf[iStartPosData] == (byte)ESymComm.ФХП)        // ФХП 
				{
					PreviousComm = ECommand.ФХП;
					return 1;
				}
			}
			else
			{
				if (PreviousComm == ECommand.SYS || PreviousComm == ECommand.Arch_Date)
				{
					PreviousComm = ECommand.Arch_Date;
					return 254;
				}
				if (btaBuf[iStartPosData] == (byte)ESymComm.ФХП)
				{
					if (PreviousComm == ECommand.ФХП)
					{
						if (btaBuf[iStartPosData] == 'R')
							return 25;
						else return 35;
					}
				}
			}
			return 1;
		}
		//_________________________________________________________________________
		public void OutMess (string asMess, string asDelimiter, bool bOutTime = true)
		{
			try
			{
				Владелец.Invoke (Владелец.OutMess, asMess, asDelimiter, bOutTime);
			}
			catch { }
		}
		//_________________________________________________________________________
		public void InitBufTX (byte[] Buf)
		{
			BufTX = Buf;
		}
		//_________________________________________________________________________
	}
}
